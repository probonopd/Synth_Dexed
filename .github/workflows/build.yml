name: Build Executables

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  checkout:
    name: Checkout Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: checkout  # Ensure this job runs after the checkout job
    strategy:
      matrix:
        include:
          - os: windows-2022
            build_type: 'windows'  # Standardized to build_type
          - os: ubuntu-22.04
            build_type: 'linux'
          - os: ubuntu-22.04-arm
            build_type: 'linux-arm64'
          - os: macos-13
            build_type: 'macos'
          - os: ubuntu-22.04
            build_type: 'alpine-static'
          - os: ubuntu-22.04-arm
            build_type: 'alpine-static-arm64'
    steps:
      - name: Install dependencies (Linux)
        if: startsWith(matrix.os, 'ubuntu')
        run: sudo apt-get update && sudo apt-get install -y git cmake g++ libasound2-dev

      - name: Install dependencies (Windows)
        if: startsWith(matrix.os, 'windows')
        uses: lukka/get-cmake@latest

      - name: Build in Alpine Docker Container
        if: matrix.build_type == 'alpine-static' || matrix.build_type == 'alpine-static-arm64'
        run: |
          docker run -v ${{ github.workspace }}:/workspace -w /workspace alpine:latest sh -c "
            apk add --no-cache build-base wget git autoconf automake libtool linux-headers && \\
            wget https://www.alsa-project.org/files/pub/lib/alsa-lib-1.2.9.tar.bz2 && \\
            tar -xjf alsa-lib-1.2.9.tar.bz2 && \\
            cd alsa-lib-1.2.9 && \\
            ./configure --enable-static --disable-shared && \\
            make -j$(nproc) && \\
            make install && \\
            cd - && \\
            apk add --no-cache git cmake make g++ musl-dev linux-headers alsa-lib-dev && \\
            git clone --depth 1 --branch "minidexed-native" "https://github.com/${{ github.repository }}" && \\
            cd Synth_Dexed && \\
            cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DCMAKE_EXE_LINKER_FLAGS='-static -lasound' && \\
            cmake --build build --config Release
          "

      - name: Build with CMake (Non-Alpine)
        if: matrix.build_type != 'alpine-static' && matrix.build_type != 'alpine-static-arm64'
        run: |
          git clone --depth 1 --branch "minidexed-native" "https://github.com/${{ github.repository }}" && cd Synth_Dexed && cmake -S . -B build -DCMAKE_BUILD_TYPE=Release && cmake --build build --config Release

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: Synth_Dexed-${{ matrix.os }}-${{ matrix.build_type }}
          path: |
            Synth_Dexed/build/bin/Release/FMRack.exe
            Synth_Dexed/build/bin/FMRack
            Synth_Dexed/build/FMRack
          if-no-files-found: warn # Optional: warn if no files are found, default is error
