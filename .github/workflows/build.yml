name: Build Executables

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    strategy:
      matrix:
        include:
          - os: windows-2022
            container: ''
          - os: ubuntu-22.04
            container: ''
          - os: ubuntu-22.04-arm
            container: ''
          - os: macos-13
            container: ''
          - os: ubuntu-22.04
            container: alpine:latest
            build_type: alpine-static
          - os: ubuntu-22.04-arm
            container: alpine:latest
            build_type: alpine-static-arm64
    steps:
      - name: Checkout code
        run: git clone ${{ github.repository }} .

      - name: Install dependencies (Linux)
        if: startsWith(matrix.os, 'ubuntu') && matrix.container == ''
        run: sudo apt-get update && sudo apt-get install -y cmake g++ libasound2-dev

      - name: Install dependencies (Alpine)
        if: matrix.build_type == 'alpine-static' || matrix.build_type == 'alpine-static-arm64'
        run: apk add --no-cache git cmake make g++ musl-dev linux-headers alsa-lib-dev

      - name: Install dependencies (Windows)
        if: startsWith(matrix.os, 'windows')
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y
          choco install visualstudio2019buildtools -y

      - name: Configure
        if: matrix.build_type != 'alpine-static' && matrix.build_type != 'alpine-static-arm64'
        run: cmake -S . -B build
        env:
          CMAKE_BUILD_TYPE: Release

      - name: Build static ALSA library
        if: matrix.build_type == 'alpine-static' || matrix.build_type == 'alpine-static-arm64'
        run: |
          apk add --no-cache build-base wget autoconf automake libtool
          wget https://www.alsa-project.org/files/pub/lib/alsa-lib-1.2.9.tar.bz2
          tar -xjf alsa-lib-1.2.9.tar.bz2
          cd alsa-lib-1.2.9
          ./configure --enable-static --disable-shared
          make -j$(nproc)
          make install

      - name: Configure (Alpine Static)
        if: matrix.build_type == 'alpine-static' || matrix.build_type == 'alpine-static-arm64'
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DCMAKE_EXE_LINKER_FLAGS="-static -lasound"

      - name: Build C++ project
        run: |
             cmake --build build --config Release

      - name: Upload build
        run: |
          mkdir -p artifacts
          cp build/bin/Release/FMRack.exe artifacts/ || true
          cp build/bin/FMRack artifacts/ || true
          tar -czf artifacts.tar.gz artifacts
          echo "Artifacts packaged as artifacts.tar.gz"